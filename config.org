* Window Management
** Global Bindings
#+BEGIN_SRC emacs-lisp
  (defvar *my-global-keybindings* nil
    "A list of user-defined global keybindings.")

  (defun make-global-keybindings (key-pairs)
    "KEY-PAIRS are of the form (string symbol) where STRING contains the key combination and SYMBOL is the function to call."
    (append (mapcar (lambda (x)
                      (list 'global-set-key (list 'kbd (car x)) (cadr x)))
                    key-pairs)
            (mapcar (lambda (x)
                      (list 'push-new-global-keybinding `',x))
                    key-pairs)))

  (defun push-new-global-keybinding (key-pair)
    (unless (member key-pair *my-global-keybindings*)
      (push key-pair *my-global-keybindings*)))

  (defmacro def-global-keys (&rest key-pairs)
    "Expand a series of (str sym) -> (global-set-key (kbd str) sym)."
    `(progn ,@(make-global-keybindings key-pairs)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (def-global-keys
    ("C-x O" 'mode-line-other-buffer)
    ("s-a" 'org-agenda)
    ;; Rebinding these to Ctrl-r and Ctrl-R since swiper is bound to Ctrl-s.
    ("C-r" 'isearch-forward)
    ("C-S-R" 'isearch-backward)
    ("<s-return>" 'ansi-term)
    ("C-x b" 'ibuffer)
    ("C-x C-b" 'ido-switch-buffer)
    ("C-c s-e" 'config-visit)
    ("C-c s-r" 'config-reload)
    ("C-c s-s" 'stumpwm-config)
    ("C-x 2" 'split-and-follow-horizontally)
    ("C-x 3" 'split-and-follow-vertically)
    ("C-c w w" 'kill-whole-word)
    ("C-c w l" 'copy-whole-line)
    ("C-x k" 'kill-current-buffer)
    ("C-M-s-k" 'kill-all-buffers))
#+END_SRC

** Enable Ido Mode
#+BEGIN_SRC emacs-lisp
  (setq
   ido-enable-flex-matching nil
   ido-create-new-buffer 'always
   ido-everywhere t)
  (ido-mode t)

  ;; vertical ido
  ;; ido-vertical-mode from the package destroys C-h f performance in conjunction with ido-ubiquitous-mode
  ;; so we use our own ido-vertical
  ;; taken from the wiki page
  (setq ido-decorations (quote ("\n-> " "" "\n   " "\n   ..." "[" "]" " [No match]" " [Matched]" " [Not readable]" " [Too big]" " [Confirm]")))
  (defun ido-disable-line-truncation () (set (make-local-variable 'truncate-lines) nil))
  (add-hook 'ido-minibuffer-setup-hook 'ido-disable-line-truncation)
  (defun ido-define-keys () ;; C-n/p is more intuitive in vertical layout
    (define-key ido-completion-map (kbd "C-n") 'ido-next-match)
    (define-key ido-completion-map (kbd "C-p") 'ido-prev-match))
  (add-hook 'ido-setup-hook 'ido-define-keys)
#+END_SRC
** Window Splitting & Following
#+BEGIN_SRC emacs-lisp
  (defun split-and-follow-horizontally ()
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))
  (defun split-and-follow-vertically ()
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))

  (add-to-list 'display-buffer-alist
               '("*Apropos*" display-buffer-same-window))
  (add-to-list 'display-buffer-alist
               '("*Help*" display-buffer-same-window))
#+END_SRC
** Buffers
*** Always kill current buffer
#+BEGIN_SRC emacs-lisp
  (defun kill-current-buffer ()
    (interactive)
    (kill-buffer (current-buffer)))
#+END_SRC
*** Kill all buffers
#+BEGIN_SRC emacs-lisp
  (defun kill-all-buffers ()
    (interactive)
    (mapc 'kill-buffer (buffer-list)))
#+END_SRC
* General QoL
** Mark
#+BEGIN_SRC emacs-lisp
  (defun save-position ()
    (interactive)
    (push-mark))

  (global-set-key (kbd "s-x") 'save-position)
#+END_SRC
** Calendar
#+BEGIN_SRC emacs-lisp
  (setq calendar-latitude 33.46)
  (setq calendar-longitude -118.11)
#+END_SRC
** Mark-line
#+BEGIN_SRC emacs-lisp
  (defun mark-line ()
    (interactive)
    (move-beginning-of-line nil)
    (set-mark-command nil)
    (move-end-of-line nil))

  (defun comment-box-line ()
    (interactive "*r\np")
    (mark-line)
    (comment-box))
#+END_SRC
** Info
#+BEGIN_SRC emacs-lisp
  ;; Center screen on menu item when moving up.
  (advice-add 'Info-up :after 'recenter)
#+END_SRC
** Spelling
#+BEGIN_SRC emacs-lisp
  ;; (add-hook 'LaTeX-mode-hook 'flyspell-mode)
  ;; (add-hook 'org-mode-hook 'flyspell-mode)
  (global-set-key (kbd "<f8>") 'flyspell-mode)
#+END_SRC
** Initial Buffer
#+BEGIN_SRC emacs-lisp
  (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
#+END_SRC
** Environment
#+BEGIN_SRC emacs-lisp
  (unless (getenv "THEME")
    (setenv "THEME" "solarized-light"))
#+END_SRC
** Languages
*** Lisp
#+BEGIN_SRC emacs-lisp
  ;; (setq inferior-lisp-program "sbcl")
#+END_SRC
*** C/C++
#+BEGIN_SRC emacs-lisp
  ;; (add-hook 'c++-mode-hook 'irony-mode)
  ;; (add-hook 'c-mode-hook 'irony-mode)
  (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options)
  (add-hook 'irony-mode-hook 'irony-eldoc)
#+END_SRC
** Compile
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c s-c") 'compile)
#+END_SRC
** Tabs and spaces
#+BEGIN_SRC emacs-lisp
  (setq-default c-basic-offset 4
                tab-width 4
                indent-tabs-mode nil
                c-default-style "k&r"
                python-indent 4
                python-guess-indent nil)
  ;(setq tab-width 4
  ;      indent-tabs-mode t
  ;      c-default-style "k&r")

  ;; For some reason the above doesn't work for python...
  (custom-set-variables
   '(tab-width 4))

  ;(defvaralias 'c-basic-offset 'tab-width)
#+END_SRC
** Convenient functions
*** kill-whole-word
#+BEGIN_SRC emacs-lisp
  (defun kill-whole-word ()
    (interactive)
    (forward-char)
    (backward-word)
    (kill-word 1))
#+END_SRC
*** copy-whole-line
#+BEGIN_SRC emacs-lisp
  (defun copy-whole-line ()
    (interactive)
    (save-excursion
      (kill-new
       (buffer-substring
        (point-at-bol)
        (point-at-eol)))))
#+END_SRC
** Syntax
*** subword (for camelCase navigation)
#+BEGIN_SRC emacs-lisp
  (global-subword-mode 1)
#+END_SRC
*** electric
For auto-closing parentheses, etc.
#+BEGIN_SRC emacs-lisp
  (setq electric-pair-pairs '(
                              (?\( . ?\))
                              (?\[ . ?\])
                              (?\{ . ?\})
                              ))
  ;;(electric-pair-mode t)
#+END_SRC
*** show parens
#+BEGIN_SRC emacs-lisp
  (show-paren-mode t)
#+END_SRC
** Files
*** Autosave (Disabled)
#+BEGIN_SRC emacs-lisp
  (setq auto-save-default nil)
#+END_SRC
*** Backups (Use ~/.saves/)
#+BEGIN_SRC emacs-lisp
  (setq
    backup-by-copying t                           ; us cp to backup files
    backup-directory-alist '(("." . "~/.saves"))  ; stop fs clutter
    delete-old-versions t
    kept-new-versions 6
    kept-old-versions 2
    version-control t)
#+END_SRC
** Skip Emacs Startup Message
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
#+END_SRC
** Show lines and columns on modeline
#+BEGIN_SRC emacs-lisp
  (line-number-mode 1)
  (column-number-mode 1)
#+END_SRC
** Confirm w/ y or n
#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC
** Visual
*** GUI Tweaks
#+BEGIN_SRC emacs-lisp
  (when window-system (global-hl-line-mode t))

  ;; (when window-system (global-prettify-symbols-mode t))
  ;; (global-prettify-symbols-mode t)
  ;; (global-pretty-mode t)

  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
#+END_SRC
*** Relative Line Numbers
#+BEGIN_SRC emacs-lisp
  (use-package linum-relative
    :ensure t
    :config
    (setq linum-relative-current-symbol "")
    (add-hook 'prog-mode-hook 'linum-relative-mode))
#+END_SRC
** Sounds
#+BEGIN_SRC emacs-lisp
  (setq ring-bell-function 'ignore)
#+END_SRC
** Scroll Gradually
#+BEGIN_SRC emacs-lisp
  (setq scroll-conservatively 100)
#+END_SRC
** Config
*** Edit
#+BEGIN_SRC emacs-lisp
  (defun config-visit ()
    (interactive)
    (find-file "~/.emacs.d/config.org"))

  (defun stumpwm-config ()
    (interactive)
    (find-file "~/.stumpwm.d/init.lisp"))
#+END_SRC
*** Reload
#+BEGIN_SRC emacs-lisp
  (defun config-reload ()
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
#+END_SRC
** Clock
#+BEGIN_SRC emacs-lisp
  (setq display-time-24hr-format t)
  (display-time-mode 1)
#+END_SRC
* Packages (Active)
** 
#+BEGIN_SRC emacs-lisp
  ;; (use-package sml-mode
  ;;   :ensure t)
#+END_SRC
** auctex
#+BEGIN_SRC emacs-lisp
  (setq TeX-auto-save t)
  (setq TeX-parse-self t)
  ;; (setq-default TeX-master nil) ; prompt for master file, useful for multi-documents
  (add-hook 'LaTeX-mode-hook 'turn-on-reftex)
  (setq reftex-plug-into-AUCTeX t)
  (setq TeX-electric-sub-and-superscript t)
  (add-hook 'LaTeX-mode-hook 'visual-line-mode)
  (add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
  (setq TeX-PDF-mode t)

  ;; see https://superuser.com/a/902764
  ;; (TeX-global-PDF-mode t)
  (setq latex-run-command "pdflatex")
#+END_SRC
** mingus
#+BEGIN_SRC emacs-lisp
  (use-package mingus
    :ensure t
    :config
    ;; (add-to-list 'ivy-completing-read-handlers-alist '(mingus-query . nil))
    :bind
    ("s-m b" . mingus-browse)
    ("s-m p" . mingus))
#+END_SRC
** emms
#+BEGIN_SRC emacs-lisp
  (use-package emms
    :ensure t
    :config
      (require 'emms-setup)
      (require 'emms-player-mpd)
      (emms-all) ; don't change this to values you see on stackoverflow questions if you expect emms to work
      (setq emms-seek-seconds 5)
      (setq emms-player-list '(emms-player-mpd))
      (setq emms-info-functions '(emms-info-mpd))
      (setq emms-player-mpd-server-name "localhost")
      (setq emms-player-mpd-server-port "6600"))
      ;; ("s-m r" . emms-player-mpd-update-all-reset-cache)
  (setq mpc-host "localhost:6600")

  (defun mpd/update-database ()
    "Updates the MPD database synchronously."
    (interactive)
    (call-process "mpc" nil nil nil "update")
    (message "MPD Database Updated!"))
  (global-set-key (kbd "s-m u") 'mpd/update-database)
#+END_SRC
** paredit
#+BEGIN_SRC emacs-lisp
  (use-package paredit
    :ensure t
    :config
    (add-hook 'lisp-mode-hook 'paredit-mode)
    (add-hook 'scheme-mode-hook 'paredit-mode)
    (add-hook 'emacs-lisp-mode-hook 'paredit-mode))

  (defun no-space-between-@-open-paren (endp delimiter)
    (not (and (eql ?\( delimiter)
              (eql ?\@ (char-before (point))))))

  (setq paredit-space-for-delimiter-predicates
        '(no-space-between-@-open-paren))
#+END_SRC
** dmenu
#+BEGIN_SRC emacs-lisp
  (use-package dmenu
    :ensure t
    :bind
    ("s-SPC" . 'dmenu))
#+END_SRC
** smart-tabs
#+BEGIN_SRC emacs-lisp
  (use-package smart-tabs-mode
    :ensure t
    :init
    (setq smart-tabs-mode nil)
    :config
    (smart-tabs-insinuate 'c 'c++ 'python))
#+END_SRC
** ido-completig-read+
#+BEGIN_SRC emacs-lisp
  (use-package ido-completing-read+
    :ensure t
    :config
    (ido-ubiquitous-mode 1))
#+END_SRC
** geiser
*Note*: Installing with use-package causes problems for me...
The geiser commands will work immediately after installing but once I restart emacs they break. Attempting to start a geiser REPL at this point will throw an error: "required feature 'geiser-guile' was not provided".
Just directly installing with melpa package-install seems to be working for now...
** easy-kill
#+BEGIN_SRC emacs-lisp
  (use-package easy-kill
    :ensure t
    :config (global-set-key [remap kill-ring-save] 'easy-kill))
#+END_SRC
** expand-region
#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :ensure t
    :bind ("C-=" . 'er/expand-region))
#+END_SRC
** multiple-cursors
#+BEGIN_SRC emacs-lisp
    (use-package multiple-cursors
      :ensure t
      :bind
      ("s-q" . mc/mark-next-like-this)
      ("s-Q" . mc/unmark-next-like-this))
#+END_SRC
** flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :config
    (add-hook 'prog-mode-hook 'flycheck-mode)
    (with-eval-after-load 'flycheck
      (setq-default flycheck-disabled-checkers '(emacs-lisp-checkdoc)))) ; stop annoying "add comments!" warnings
#+END_SRC
** stumpwm-mode
#+BEGIN_SRC emacs-lisp
  (use-package stumpwm-mode
    :ensure t)
#+END_SRC
** magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t)
#+END_SRC
** which-key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :init
    (which-key-mode))
#+END_SRC
** beacon
#+BEGIN_SRC emacs-lisp
  (use-package beacon
    :ensure t
    :init
    (beacon-mode 1))
#+END_SRC
** smex
#+BEGIN_SRC emacs-lisp
  (use-package smex
    :ensure t
    :init (smex-initialize)
    :bind
    ("M-x" . smex))
#+END_SRC
** org-bullets
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode))))
#+END_SRC
** avy
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :init
    (setq avy-background t)
    :bind
    ("s-f" . avy-goto-word-1)
    ("s-F" . avy-goto-char))
#+END_SRC
** rainbow
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-mode
    :ensure t
    :init (add-hook 'prog-mode-hook 'rainbow-mode))
#+END_SRC
#+BEGIN_SRC emacs-lisp
  ;; (use-package rainbow-delimiters
  ;;   :ensure t
  ;;   :init
  ;;   (rainbow-delimiters-mode t)
  ;;   (add-hook 'prog-mode-hook 'rainbow-delimiters-mode)
  ;;   (add-hook 'geiser-repl-mode 'rainbow-delimiters-mode))
#+END_SRC
** sudo-edit
#+BEGIN_SRC emacs-lisp
  (use-package sudo-edit
    :ensure t)
#+END_SRC
** dashboard
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook)
    (setq
     dashboard-items '((recents . 7)
                       (projects . 7))
     dashboard-banner-logo-title "Welcome to Emacs"))
#+END_SRC
** company
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :config
    (setq company-idle-delay 0)
    :init
    (add-hook 'prog-mode-hook 'company-mode))

  (with-eval-after-load 'company
      (define-key company-active-map (kbd "M-n") nil)
      (define-key company-active-map (kbd "M-p") nil)
      (define-key company-active-map (kbd "C-n") #'company-select-next)
      (define-key company-active-map (kbd "C-p") #'company-select-previous))
#+END_SRC
** modeline
*** powerline
#+BEGIN_SRC emacs-lisp :tangle no
  (use-package powerline
    :ensure t
    :init
    (powerline-default-theme))
#+END_SRC
*** diminish
#+BEGIN_SRC emacs-lisp
  (use-package diminish
    :ensure t
    :init
    (mapc 'diminish
          '(auto-revert-mode
            beacon-mode
            which-key-mode
            subword-mode
            rainbow-mode
            linum-relative-mode
            visual-line-mode
            global-guix-prettify-mode
            guix-prettify-mode
            org-indent-mode
            paredit-mode
            org-indent-mode
            eldoc-mode)))
#+END_SRC
** symon
#+BEGIN_SRC emacs-lisp
  (use-package symon
    :ensure t
    :bind
    ("s-i" . symon-mode))
#+END_SRC
** popup-kill-ring
#+BEGIN_SRC emacs-lisp
  (use-package popup-kill-ring
    :ensure t
    :bind
    ("M-y" . popup-kill-ring))
#+END_SRC
** swiper
#+BEGIN_SRC emacs-lisp :tangle no
  (use-package swiper
    :ensure t
    :bind
    ("C-s" . swiper))
#+END_SRC
** projectile
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :init
    (projectile-mode 1))
#+END_SRC
* Packages (Unused)
** spaceline
#+BEGIN_SRC emacs-lisp
  ;; (use-package spaceline
  ;;   :ensure t
  ;;   :config
  ;;   (require 'spaceline-config)
  ;;   (setq powerline-default-separator (quote arrow))
  ;;   (spaceline-spacemacs-theme))
#+END_SRC

** slime
I'll probably install with quicklisp in the future.
#+BEGIN_SRC emacs-lisp
  ;; (use-package slime
    ;; :ensure t)
#+END_SRC
This package is annoying me at the moment when typing in the REPL so I've disabled it.
#+BEGIN_SRC emacs-lisp
  ;; (use-package slime-company
    ;; :ensure t)

  ;; (slime-setup '(slime-company))
#+END_SRC
** guix
#+BEGIN_SRC emacs-lisp
  (use-package guix
    :ensure t
    :config
    (setq global-guix-prettify-mode t))
#+END_SRC
** hungry-delete
Note: there is a package called hungry-delete that will automatically
delete whitespace until it finds a non-whitespace character when
you press backspace...
** ido-vertical
#+BEGIN_SRC emacs-lisp
  ;; (use-package ido-vertical-mode ; disabled b/c of performance with ido-ubiquitous
  ;;   :ensure t
  ;;   :init
  ;;   (ido-vertical-mode 0)) 
  ;; (setq ido-vertical-define-keys 'C-n-and-C-p-only)
#+END_SRC
** treemacs
#+BEGIN_SRC emacs-lisp
  ;; (use-package treemacs ; not using this right now
  ;;   :ensure t
  ;;   :bind
  ;;   ("C-x \\" . 'treemacs-toggle))
#+END_SRC
** switch-window
#+BEGIN_SRC emacs-lisp
  (use-package switch-window ; don't need this now
    :ensure t
    :config
    (setq
     switch-window-input-style 'minibuffer
     switch-window-increase 4
     switch-window-threshold 2
     switch-window-shortcut-style 'qwerty
     switch-window-qwerty-shortcuts
     '("a" "s" "d" "f" "j" "k" "l"))
    :bind
    ([remap other-window] . switch-window))
#+END_SRC
* Terminal
** Set default shell: zsh
#+BEGIN_SRC emacs-lisp
  (defvar my-term-shell "/usr/bin/zsh")
  (defadvice ansi-term (before force-bash)
    (interactive (list my-term-shell)))
  (defadvice term (before force-bash)
    (interactive (list my-term-shell)))
  (ad-activate 'ansi-term)
  (ad-activate 'term)
#+END_SRC

* Org
** Publish
#+BEGIN_SRC emacs-lisp
  (require 'ox-publish)
  (setq org-publish-project-alist
        '(("website-notes"
           :base-directory "~/website/org/"
           :base-extension "org"
           :publishing-directory "~/website/html/"
           :recursive t
           :publishing-function org-html-publish-to-html
           :headline-levels 4
           :auto-preamble t)
          ("website-static"
           :base-directory "~/website/org/"
           :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|mp3\\|ogg\\|swf\\|mp4"
           :publishing-directory "~/website/html/"
           :recursive t
           :publishing-function org-publish-attachment)
          ("website" :components ("website-notes" "website-static"))))
#+END_SRC
** Clock
#+BEGIN_SRC emacs-lisp
  (setq org-clock-persist 'history)
  (org-clock-persistence-insinuate)
#+END_SRC
** Code blocks
*** Edit code blocks in current window
#+BEGIN_SRC emacs-lisp
  (setq org-src-window-setup 'current-window)
#+END_SRC
*** Native syntax highlighting
#+BEGIN_SRC emacs-lisp
  (setq org-src-fontify-natively t)
#+END_SRC
*** Native tab behavior
For some reason this setting not only does nothing but also throws an error at launch that prevents the spacemacs theme from even loading...
#+BEGIN_SRC emacs-lisp
;  ( org-src-tab-acts-natively t)
#+END_SRC
*** Snippets
**** Lisp
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-structure-template-alist
               '("l" "#+BEGIN_SRC lisp\n?\n#+END_SRC"))
#+END_SRC
**** emacs-lisp
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-structure-template-alist
               '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))
#+END_SRC
**** scheme
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-structure-template-alist
               '("sc" "#+BEGIN_SRC scheme\n?\n#+END_SRC"))
#+END_SRC
**** python
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-structure-template-alist
               '("py" "#+BEGIN_SRC python\n?\n#+END_SRC"))
#+END_SRC
**** shell
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-structure-template-alist
               '("sh" "#+BEGIN_SRC sh\n?\n#+END_SRC"))
#+END_SRC
**** C++
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-structure-template-alist
               '("cpp" "#+BEGIN_SRC cpp\n?\n#+END_SRC"))
#+END_SRC
*** Code eval
#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((lisp . t)
     (python . t)
     (gnuplot . t)
     ))
  (defun my-org-confirm-babel-evaluate (lang body)
    (and (not (string= lang "lisp"))
         (not (string= lang "emacs-lisp"))
         (not (string= lang "scheme"))))  ; don't ask for listed languages

  (setq org-confirm-babel-evaluate 'my-org-confirm-babel-evaluate) ;; overwrite default

  ;; (setq org-babel-lisp-eval-fn 'slime-eval)
#+END_SRC
** Line-wrapping
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook '(lambda () (visual-line-mode)))
#+END_SRC
** Source orgfiles for agenda
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-agenda-files (expand-file-name "~/orgfiles"))
#+END_SRC
** Indent-mode
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook 'org-indent-mode)
#+END_SRC
** Line Spacing
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook '(lambda () (setq line-spacing .1)))
  (defun set-line-spacing (num)
    (interactive "nPick a number for line spacing: ")
    (setq-local line-spacing num))
#+END_SRC
* Slime
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "s-s") 'slime-selector)
  (global-set-key (kbd "C-h H") 'slime-documentation-lookup)
  ;; (load (expand-file-name "/usr/lib/quicklisp/slime-helper.el"))
  (add-to-list 'slime-contribs 'slime-fancy)
  (add-to-list 'slime-contribs 'slime-banner)
#+END_SRC

For faster startup. SLIME manual 2.5.3.
Use sbcl image.
#+BEGIN_SRC emacs-lisp
  (setq slime-lisp-implementations
        `((sbcl ("sbcl" "--core" ,(expand-file-name "~/.emacs.d/sbcl.core-for-slime")))
          (acl ("/home/tim/Code/allegro/acl10.1express/mlisp"))))
#+END_SRC

Local HyperSpec copy. Use w3m.
#+BEGIN_SRC emacs-lisp
  (setq common-lisp-hyperspec-root (expand-file-name "~/.emacs.d/HyperSpec/"))
  (setq slime-browse-url-browser-function 'w3m-browse-url)

  ;; Would like a cleaner way to do this, i.e. just wrap slime-hyperspec-lookup instead of making a copied definition...
  (defun my-slime-hyperspec-lookup (symbol-name)
    "Identical to `slime-hyperspec-lookup' except we shadow `browse-url-browser-function'."
    (interactive (list (common-lisp-hyperspec-read-symbol-name
                        (slime-symbol-at-point))))
    (if slime-browse-url-browser-function
        (let ((browse-url-browser-function
               slime-browse-url-browser-function))
          (hyperspec-lookup symbol-name))
      (hyperspec-lookup symbol-name)))

  (setq slime-documentation-lookup-function 'my-slime-hyperspec-lookup)
#+END_SRC

Chicken Scheme extension - broken
#+BEGIN_SRC emacs-lisp
  ;; (add-to-list 'load-path (expand-file-name (directory-file-name "~/Builds/chicken-slime/swank-chicken/")))
  ;; (autoload 'chicken-slime "chicken-slime" "SWANK backend for Chicken" t)
  ;; (add-hook 'scheme-mode-hook 'slime-mode)
#+END_SRC
* Tramp
#+BEGIN_SRC emacs-lisp
  ;; (eval-after-load 'tramp '(setenv "SHELL" "/bin/bash"))
  (defvar tramp-shell-prompt-pattern-default "\\(?:^\\|\\)[^]#$%>\n]*#?[]#$%>] *\\(\\[[0-9;]*[a-zA-Z] *\\)*")
  (setf tramp-shell-prompt-pattern "\\(?:^\\|\\)[^]#$%>\n]*#?[]#$%>].* *\\(\\[[0-9;]*[a-zA-Z] *\\)*")
#+END_SRC
* Prolog
#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.pl$" . prolog-mode))
  ;; (define-key 'prolog-mode-map (kbd "C-x C-e") 'ediprolog-dwim)

  (setq prolog-electric-if-then-else-flag t)
#+END_SRC
