* Window Management
** Global Bindings
*** other-buffer
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x g o") 'mode-line-other-buffer)
#+END_SRC
*** super key
#+BEGIN_SRC emacs-lisp
;  (global-set-key "Alt_L" . "Super")
#+END_SRC
*** isearch
Rebinding these to Ctrl-r and Ctrl-R since swiper is bound to Ctrl-s.
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-r") 'isearch-forward)
  (global-set-key (kbd "C-S-R") 'isearch-backward)
#+END_SRC
*** org-agenda
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c a") 'org-agenda)
#+END_SRC
*** ansi-term
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "<s-return>") 'ansi-term)
#+END_SRC
*** ibuffer
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x b") 'ibuffer)
#+END_SRC
*** ido switch buffer
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x C-b") 'ido-switch-buffer)
#+END_SRC
*** config
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c e") 'config-visit)
  (global-set-key (kbd "C-c r") 'config-reload)
#+END_SRC
*** window splitting
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)
  (global-set-key (kbd "C-x 3") 'split-and-follow-vertically)
#+END_SRC
*** kill-whole-word
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c w w") 'kill-whole-word)
#+END_SRC
*** copy-whole-line
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c w l") 'copy-whole-line)
#+END_SRC
*** kill-current-buffer
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x k") 'kill-current-buffer)
#+END_SRC
*** kill-all-buffers
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-M-s-k") 'kill-all-buffers)
#+END_SRC
** Enable Ido Mode
#+BEGIN_SRC emacs-lisp
  (setq
   ido-enable-flex-matching nil
   ido-create-new-buffer 'always
   ido-everywhere 1)
  (ido-mode 1)

  ;; vertical ido
  ;; ido-vertical-mode from the package destroys C-h f performance in conjunction with ido-ubiquitous-mode
  ;; so we use our own ido-vertical
  ;; taken from the wiki page
  (setq ido-decorations (quote ("\n-> " "" "\n   " "\n   ..." "[" "]" " [No match]" " [Matched]" " [Not readable]" " [Too big]" " [Confirm]")))
  (defun ido-disable-line-truncation () (set (make-local-variable 'truncate-lines) nil))
  (add-hook 'ido-minibuffer-setup-hook 'ido-disable-line-truncation)
  (defun ido-define-keys () ;; C-n/p is more intuitive in vertical layout
    (define-key ido-completion-map (kbd "C-n") 'ido-next-match)
    (define-key ido-completion-map (kbd "C-p") 'ido-prev-match))
  (add-hook 'ido-setup-hook 'ido-define-keys)
#+END_SRC
** Window Splitting & Following
#+BEGIN_SRC emacs-lisp
  (defun split-and-follow-horizontally ()
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))
  (defun split-and-follow-vertically ()
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))

  (add-to-list 'display-buffer-alist
               '("*Apropos*" display-buffer-same-window))
  (add-to-list 'display-buffer-alist
               '("*Help*" display-buffer-same-window))
#+END_SRC
** Buffers
*** Always kill current buffer
#+BEGIN_SRC emacs-lisp
  (defun kill-current-buffer ()
    (interactive)
    (kill-buffer (current-buffer)))
#+END_SRC
*** Kill all buffers
#+BEGIN_SRC emacs-lisp
  (defun kill-all-buffers ()
    (interactive)
    (mapc 'kill-buffer (buffer-list)))
#+END_SRC
* General QoL
** Languages
*** Lisp
#+BEGIN_SRC emacs-lisp
  (setq lisp-indent-function 'common-lisp-indent-function
        inferior-lisp-program "sbcl")
#+END_SRC
** Compile
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "s-c") 'compile)
#+END_SRC
** Tabs and spaces
#+BEGIN_SRC emacs-lisp
  (setq-default c-basic-offset 4
                tab-width 4
                indent-tabs-mode nil)
  ;(setq tab-width 4
  ;      indent-tabs-mode t
  ;      c-default-style "k&r")

  ;(defvaralias 'c-basic-offset 'tab-width)
#+END_SRC
** Convenient functions
*** kill-whole-word
#+BEGIN_SRC emacs-lisp
  (defun kill-whole-word ()
    (interactive)
    (forward-char)
    (backward-word)
    (kill-word 1))
#+END_SRC
*** copy-whole-line
#+BEGIN_SRC emacs-lisp
  (defun copy-whole-line ()
    (interactive)
    (save-excursion
      (kill-new
       (buffer-substring
        (point-at-bol)
        (point-at-eol)))))
#+END_SRC
** Syntax
*** subword (for camelCase navigation)
#+BEGIN_SRC emacs-lisp
  (global-subword-mode 1)
#+END_SRC
*** electric
For auto-closing parentheses, etc.
#+BEGIN_SRC emacs-lisp
  (setq electric-pair-pairs '(
                              (?\( . ?\))
                              (?\[ . ?\])
                              (?\{ . ?\})
                              ))
  ;;(electric-pair-mode t)
#+END_SRC
** Files
*** Autosave (Disabled)
#+BEGIN_SRC emacs-lisp
  (setq auto-save-default nil)
#+END_SRC
*** Backups (Use ~/.saves/)
#+BEGIN_SRC emacs-lisp
  (setq
    backup-by-copying t                           ; us cp to backup files
    backup-directory-alist '(("." . "~/.saves"))  ; stop fs clutter
    delete-old-versions t
    kept-new-versions 6
    kept-old-versions 2
    version-control t)
#+END_SRC
** Skip Emacs Startup Message
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
#+END_SRC
** Show lines and columns on modeline
#+BEGIN_SRC emacs-lisp
  (line-number-mode 1)
  (column-number-mode 1)
#+END_SRC
** Confirm w/ y or n
#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC
** Visual
*** GUI Tweaks
#+BEGIN_SRC emacs-lisp
  (when window-system (global-hl-line-mode t))

  (when window-system (global-prettify-symbols-mode t))

  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
#+END_SRC
*** Relative Line Numbers
#+BEGIN_SRC emacs-lisp
  (use-package linum-relative
    :ensure t
    :config
    (setq linum-relative-current-symbol "")
    (add-hook 'prog-mode-hook 'linum-relative-mode))
#+END_SRC
** Sounds
#+BEGIN_SRC emacs-lisp
  (setq ring-bell-function 'ignore)
#+END_SRC
** Scroll Gradually
#+BEGIN_SRC emacs-lisp
  (setq scroll-conservatively 100)
#+END_SRC
** Config
*** Edit
#+BEGIN_SRC emacs-lisp
  (defun config-visit ()
    (interactive)
    (find-file "~/.emacs.d/config.org"))
#+END_SRC
*** Reload
#+BEGIN_SRC emacs-lisp
  (defun config-reload ()
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
#+END_SRC
** Clock
#+BEGIN_SRC emacs-lisp
  (setq display-time-24hr-format t)
  (display-time-mode 1)
#+END_SRC
* Packages (Active)
** ido-completig-read+
#+BEGIN_SRC emacs-lisp
  (use-package ido-completing-read+
    :ensure t
    :config
    (ido-ubiquitous-mode 1))
#+END_SRC
** guix
#+BEGIN_SRC emacs-lisp
    (use-package guix
      :ensure t
      :config
      (setq global-guix-prettify-mode t))
#+END_SRC
** slime
#+BEGIN_SRC emacs-lisp
  ;; (use-package slime ; may want to install via other means
    ;; :ensure t)

  (setq slime-contribs '(slime-fancy))

  ;; (use-package slime-company
    ;; :ensure t)

  ;; (slime-setup '(slime-company))
#+END_SRC
** geiser
*Note*: For whatever reason, installing in this way does not work...
The geiser commands will work immediately after installing but once I restart emacs they break.
Attempting to start a geiser REPL at this point will throw an error:
"required feature 'geiser-guile' was not provided"
#+BEGIN_SRC emacs-lisp
  ;; (use-package geiser
  ;;   :ensure t)
#+END_SRC
** expand-region
#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :ensure t
    :bind ("C-S-q" . 'er/expand-region))
#+END_SRC
** multiple-cursors
#+BEGIN_SRC emacs-lisp
    (use-package multiple-cursors
      :ensure t
      :bind
      ("s-q" . mc/mark-next-like-this)
      ("s-Q" . mc/unmark-next-like-this))
#+END_SRC
** flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :config
    (add-hook 'prog-mode-hook 'flycheck-mode)
    (with-eval-after-load 'flycheck
      (setq-default flycheck-disabled-checkers '(emacs-lisp-checkdoc)))) ; stop annoying "add comments!" warnings
#+END_SRC
** stumpwm-mode
#+BEGIN_SRC emacs-lisp
  (use-package stumpwm-mode
    :ensure t)
#+END_SRC
** smart-tabs
#+BEGIN_SRC emacs-lisp
  ;; (use-package smart-tabs-mode
  ;;   :ensure t
  ;;   :init
  ;;   (setq smart-tabs-mode 1)
  ;;   :config
  ;;   (smart-tabs-insinuate 'c 'c++ 'lisp 'python))
#+END_SRC
** magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :bind
    ("s-g" . magit-status))
#+END_SRC
** which-key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :init
    (which-key-mode))
#+END_SRC
** beacon
#+BEGIN_SRC emacs-lisp
  (use-package beacon
    :ensure t
    :init
    (beacon-mode 1))
#+END_SRC
** smex
#+BEGIN_SRC emacs-lisp
  (use-package smex
    :ensure t
    :init (smex-initialize)
    :bind
    ("M-x" . smex))
#+END_SRC
** org-bullets
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode))))
#+END_SRC
** avy
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :init
    (setq avy-background t)
    :bind
    ("s-f" . avy-goto-word-1)
    ("s-F" . avy-goto-char))
#+END_SRC
** rainbow
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-mode
    :ensure t
    :init (add-hook 'prog-mode-hook 'rainbow-mode))
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :init
    (rainbow-delimiters-mode 1)
    (add-hook 'prog-mode-hook 'rainbow-delimiters-mode)
    (add-hook 'geiser-repl-mode 'rainbow-delimiters-mode))
#+END_SRC
** sudo-edit
#+BEGIN_SRC emacs-lisp
  ;; (use-package sudo-edit
  ;;   :ensure t
  ;;   :bind ("C-c s" . sudo-edit))
#+END_SRC
** dashboard
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook)
    (setq
     dashboard-items '((recents . 7)
                       (projects . 7))
     dashboard-banner-logo-title "Welcome to Emacs"))
#+END_SRC
** company
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :config
    (setq company-idle-delay 1)
    :init
    (add-hook 'after-init-hook 'company-mode))

  (with-eval-after-load 'company
      (define-key company-active-map (kbd "M-n") nil)
      (define-key company-active-map (kbd "M-p") nil)
      (define-key company-active-map (kbd "C-n") #'company-select-next)
      (define-key company-active-map (kbd "C-p") #'company-select-previous))
#+END_SRC
** modeline
*** powerline
#+BEGIN_SRC emacs-lisp
  (powerline-center-theme)
#+END_SRC
*** spaceline
#+BEGIN_SRC emacs-lisp
  ;; (use-package spaceline
  ;;   :ensure t
  ;;   :config
  ;;   (require 'spaceline-config)
  ;;   (setq powerline-default-separator (quote arrow))
  ;;   (spaceline-spacemacs-theme))
#+END_SRC
*** diminish
#+BEGIN_SRC emacs-lisp
  (use-package diminish
    :ensure t
    :init
    (diminish 'auto-revert-mode)
    (diminish 'beacon-mode)
    (diminish 'which-key-mode)
    (diminish 'subword-mode)
    (diminish 'rainbow-mode)
    (diminish 'linum-relative-mode)
    (diminish 'visual-line-mode)
    (diminish 'global-guix-prettify-mode)
    (diminish 'guix-prettify-mode)
    (diminish 'org-indent-mode))
#+END_SRC
** symon
#+BEGIN_SRC emacs-lisp
  (use-package symon
    :ensure t
    :bind
    ("C-s-h" . symon-mode))
#+END_SRC
** popup-kill-ring
#+BEGIN_SRC emacs-lisp
  (use-package popup-kill-ring
    :ensure t
    :bind
    ("M-y" . popup-kill-ring))
#+END_SRC
** swiper
#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :ensure t
    :bind
    ("C-s" . swiper))
#+END_SRC
** projectile
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :init
    (projectile-mode 1))
#+END_SRC
* Packages (Unused)
** hungry-delete
Note: there is a package called hungry-delete that will automatically
delete whitespace until it finds a non-whitespace character when
you press backspace...
** ido-vertical
#+BEGIN_SRC emacs-lisp
  ;; (use-package ido-vertical-mode ; disabled b/c of performance with ido-ubiquitous
  ;;   :ensure t
  ;;   :init
  ;;   (ido-vertical-mode 0)) 
  ;; (setq ido-vertical-define-keys 'C-n-and-C-p-only)
#+END_SRC
** treemacs
#+BEGIN_SRC emacs-lisp
  ;; (use-package treemacs ; not using this right now
  ;;   :ensure t
  ;;   :bind
  ;;   ("C-x \\" . 'treemacs-toggle))
#+END_SRC
** switch-window
#+BEGIN_SRC emacs-lisp
  ;; (use-package switch-window ; don't need this now
  ;;   :ensure t
  ;;   :config
  ;;   (setq
  ;;    switch-window-input-style 'minibuffer
  ;;    switch-window-increase 4
  ;;    switch-window-threshold 2
  ;;    switch-window-shortcut-style 'qwerty
  ;;    switch-window-qwerty-shortcuts
  ;;    '("a" "s" "d" "f" "j" "k" "l"))
  ;;   :bind
  ;;   ([remap other-window] . switch-window))
#+END_SRC
** dmenu
#+BEGIN_SRC emacs-lisp
  ;; (use-package dmenu
  ;;   :ensure t
  ;;   :bind
  ;;   ("C-s-SPC" . 'dmenu))
#+END_SRC
* Terminal
** Set default shell: zsh
#+BEGIN_SRC emacs-lisp
  (defvar my-term-shell "/usr/bin/zsh")
  (defadvice ansi-term (before force-bash)
    (interactive (list my-term-shell)))
  (ad-activate 'ansi-term)
#+END_SRC

* Org
** Code blocks
*** Edit code blocks in current window
#+BEGIN_SRC emacs-lisp
  (setq org-src-window-setup 'current-window)
#+END_SRC
*** Native syntax highlighting
#+BEGIN_SRC emacs-lisp
  (setq org-src-fontify-natively t)
#+END_SRC
*** Native tab behavior
For some reason this setting not only does nothing but also throws an error at launch that prevents the spacemacs theme from even loading...
#+BEGIN_SRC emacs-lisp
;  ( org-src-tab-acts-natively t)
#+END_SRC
*** Snippets
**** Lisp
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-structure-template-alist
               '("l" "#+BEGIN_SRC lisp\n?\n#+END_SRC"))
#+END_SRC
**** emacs-lisp
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-structure-template-alist
               '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))
#+END_SRC
**** scheme
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-structure-template-alist
               '("sc" "#+BEGIN_SRC scheme\n?\n#+END_SRC"))
#+END_SRC
**** python
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-structure-template-alist
               '("py" "#+BEGIN_SRC python\n?\n#+END_SRC"))
#+END_SRC
**** shell
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-structure-template-alist
               '("sh" "#+BEGIN_SRC sh\n?\n#+END_SRC"))
#+END_SRC
**** C++
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-structure-template-alist
               '("cpp" "#+BEGIN_SRC cpp\n?\n#+END_SRC"))
#+END_SRC
*** Code eval
#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((lisp . t)
     (python . t)))
  (defun my-org-confirm-babel-evaluate (lang body)
    (not (string= lang "lisp")))  ; don't ask for listed languages
  (setq org-confirm-babel-evaluate 'my-org-confirm-babel-evaluate) ;; overwrite default
#+END_SRC
** Line-wrapping
#+BEGIN_SRC emacs-lisp
  ;; (add-hook 'org-mode-hook '(lambda () (visual-line-mode)))
#+END_SRC
** Source orgfiles for agenda
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-agenda-files (expand-file-name "~/orgfiles"))
#+END_SRC
** Indent-mode
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook 'org-indent-mode)
#+END_SRC
* Slime
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "s-s") 'slime-selector)
#+END_SRC
